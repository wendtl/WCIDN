#!/bin/bash

# TODO:
# Parse input via case statement in lieu of if statement
# Implement 'remove' function
# Get current date
# Funtion to remove all past-due events

#BEGIN ENUMERATING FUNCTIONS
#Main function: Displays contents of "dates" file
default()
{
    if [ -f ./dates ] && [ -s ./dates ]; then	
	now="$(date +'%d/%m/%Y')"
	cat dates | column -t -s '@'
    else
	(echo "#@EVENT NAME@START DATE@END DATE"; echo "") > dates
	default
    fi
}

add()
{
    echo "Type name of event, followed by [ENTER]:"
    read name
    echo "Type start date, followed by [ENTER]:"
    read start
    echo "Type end date, followed by [ENTER]:"
    read end
    LEN=$( cat dates | wc -l )
    echo "$LEN@$name@$start@$end" >> dates 
}

remove()
{
    cat dates | column -t -s '@'
    echo "Input number corresponding to the event to be removed, followed by [ENTER]:"
    read NUM 
    # Decrement num
    NUM=$(( $NUM + 1 ))
    # Remove line corresponding with num
    # NOTE: Apparently the sed '-i' flag causes problems on some unix variants?
    sed -i "${NUM}d" dates
    # Print file without chosen even
    cat dates | column -t -s '@'
    # TODO: Move through new 'dates' file to change first character of every line to new number
    # $COUNT is variable to hold new line numbers
    COUNT=0
    DOC=""
    while read line
    do	
	#LINUM= wc -l < DOC 
	#if [ $((LINUM)) -ne 0 ] && [ $((LINUM)) ; then
	if [ $((COUNT)) -ne 0 ]; then    
	   DOC="$DOC"$'\n'"$COUNT@${line:1}"
	fi
	COUNT=$(( $COUNT + 1 ))
    done < dates
    echo "#@EVENT NAME@START DATE@END DATE" > dates
    echo "$DOC" >> dates
}
#Process first argument and run coordinating function
if [ "$1" == "add" ]; then
    add

elif [ "$1" == "" ]; then
    default

elif [ "$1" == "remove" ]; then
    remove

fi
